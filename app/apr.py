# -*- coding: utf-8 -*-
"""APR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cHOIVLwcH3oZdvGCLsJVL0J_4zSy4qTq
"""



from IPython import get_ipython
from IPython.display import display
import os
import pandas as pd
import cv2
import shutil
from sklearn.model_selection import train_test_split

from ultralytics import YOLO
def prepare_dataset():
    lic_zip = '/content/Licplatesdetection_train.zip'
    import zipfile
    with zipfile.ZipFile(lic_zip, 'r') as zip_ref:
        zip_ref.extractall()
    csv_path = '/content/Licplatesdetection_train.csv'
    image_dir = '/content/license_plates_detection_train'
    dataset_dir = '/content/dataset'
    os.makedirs(dataset_dir, exist_ok=True)
    for split in ['train', 'val']:
      os.makedirs(os.path.join(dataset_dir, 'images', split), exist_ok=True)
      os.makedirs(os.path.join(dataset_dir, 'labels', split), exist_ok=True)
    annotations = pd.read_csv(csv_path)
    unique_images = annotations['img_id'].unique()

    train_imgs, val_imgs = train_test_split(unique_images, test_size=0.2, random_state=42)

    def process_split(img_list, split):
        for img in img_list:
            src_img_path = os.path.join(image_dir, img)
            dst_img_path = os.path.join(dataset_dir, 'images', split, img)
            if not os.path.exists(src_img_path):
                print(f"Image {src_img_path} not found.")
                continue

            shutil.copy(src_img_path, dst_img_path)
            img_annots = annotations[annotations['img_id'] == img]

            image = cv2.imread(src_img_path)
            if image is None:
                print(f"Failed to read image {src_img_path}.")
                continue
            h, w, _ = image.shape
            label_file = os.path.join(dataset_dir, 'labels', split, os.path.splitext(img)[0] + '.txt')
            with open(label_file, 'w') as f:
                for idx, row in img_annots.iterrows():
                    x_center = ((row['xmin'] + row['xmax']) / 2.0) / w
                    y_center = ((row['ymin'] + row['ymax']) / 2.0) / h
                    bbox_width = (row['xmax'] - row['xmin']) / w
                    bbox_height = (row['ymax'] - row['ymin']) / h
                    f.write(f"0 {x_center:.6f} {y_center:.6f} {bbox_width:.6f} {bbox_height:.6f}\n")
    process_split(train_imgs, 'train')
    process_split(val_imgs, 'val')
    data_yaml = f"""
    train: {os.path.join(dataset_dir, 'images', 'train')}
    val: {os.path.join(dataset_dir, 'images', 'val')}

    nc: 1
    names: ['license_plate']
    """
    data_yaml_path = os.path.join(dataset_dir, 'data.yaml')
    with open(data_yaml_path, 'w') as f:
        f.write(data_yaml)
    print("Dataset prepared. data.yaml written to:", data_yaml_path)
    return data_yaml_path 

def train_model():
    data_yaml_path = prepare_dataset()
    model = YOLO('yolo11n.pt')
    results = model.train(data=data_yaml_path, epochs=50, imgsz=640)
    model.save('lic_det.pt')
    print("Training complete and model saved.")

if __name__ == "__main__":
  train_model()


